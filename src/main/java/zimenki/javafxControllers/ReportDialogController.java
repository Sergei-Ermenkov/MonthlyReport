package zimenki.javafxControllers;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import zimenki.Main;import zimenki.report.*;import javafx.fxml.FXML;import javafx.scene.control.*;import javafx.scene.layout.GridPane;import javafx.scene.layout.Priority;import java.io.PrintWriter;import java.io.StringWriter;import java.time.LocalDate;import java.time.Month;import java.time.Year;import java.util.ArrayList;import java.util.List;public class ReportDialogController {    @FXML    private CheckBox consCheckBox;    @FXML    private CheckBox reportCheckBox;    @FXML    private CheckBox listCheckBox;    @FXML    private ComboBox<Month> monthBox;    @FXML    private ComboBox<Integer> yearBox;    @FXML    private Button generateButton;    @FXML    private GridPane grid;    private Main main;    @FXML    private void initialize() {        ObservableList<Month> months = FXCollections.observableArrayList(Month.values());        monthBox.setItems(months);        ArrayList<Integer> yearList = new ArrayList<>();        for (int i = Year.now().getValue(); i > Year.now().getValue()-10; i--) yearList.add(i);        ObservableList<Integer> years = FXCollections.observableArrayList(yearList);        yearBox.setItems(years);    }    public void setMain(Main main) {        this.main = main;    }    @FXML    private void handleGenerateReportExcel() {        if (yearBox.getValue() != null && monthBox.getValue() != null) {            List<Report> listReports = new ArrayList<>();            LocalDate date = LocalDate.of(yearBox.getValue(), monthBox.getValue(), 1);            if (listCheckBox.isSelected()) {                listReports.add(new TrainingReport(date));            }            if (reportCheckBox.isSelected()) {                listReports.add(new SeminarReport(date));            }            if (consCheckBox.isSelected()) {                listReports.add(new ConsolidatedReport(date));            }            for (Report report : listReports) {                try {                    report.makeReport();                } catch (NullEventsException e) {                    Alert alert = new Alert(Alert.AlertType.INFORMATION);                    alert.initOwner(main.getPrimaryStage());                    alert.setTitle("Предупреждение");                    alert.setHeaderText(null);                    alert.setContentText(e.getMessage());                    alert.showAndWait();                } catch (Exception e) {                    exceptionWindow(e);                }            }            Alert alert = new Alert(Alert.AlertType.INFORMATION);            alert.initOwner(main.getPrimaryStage());            alert.setTitle(null);            alert.setHeaderText(null);            alert.setContentText("Формирование отчета завершено");            alert.showAndWait();        }    }    private void exceptionWindow(Exception ex) {        Alert alert = new Alert(Alert.AlertType.ERROR);        alert.setTitle("Exception");        alert.setContentText(ex.getMessage());        StringWriter sw = new StringWriter();        PrintWriter pw = new PrintWriter(sw);        ex.printStackTrace(pw);        String exceptionText = sw.toString();        Label label = new Label("The exception stacktrace was:");        TextArea textArea = new TextArea(exceptionText);        textArea.setEditable(false);        textArea.setWrapText(true);        textArea.setMaxWidth(Double.MAX_VALUE);        textArea.setMaxHeight(Double.MAX_VALUE);        GridPane.setVgrow(textArea, Priority.ALWAYS);        GridPane.setHgrow(textArea, Priority.ALWAYS);        GridPane expContent = new GridPane();        expContent.setMaxWidth(Double.MAX_VALUE);        expContent.add(label, 0, 0);        expContent.add(textArea, 0, 1);        alert.getDialogPane().setExpandableContent(expContent);        alert.showAndWait();    }}